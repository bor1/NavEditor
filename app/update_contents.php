<?phprequire_once('config.php');require_once('../auth.php');require_once('classes/UserMgmt_Class.php');require_once('classes/SimpleLogger_Class.php');require_once('classes/FileHandler_Class.php');require_once('classes/ContentHandler_Class.php');require_once('classes/BackupManager.php');NavTools::save_execution_time("loading required done", $ne2_config_info['debug_execution_file'], $ne2_config_info['debug_time']);// workaround for preg_replace error by large contentini_set("pcre.backtrack_limit", "400000");ini_set("pcre.recursion_limit", "400000");$oper = $_REQUEST['json_oper'];$data = $_REQUEST['json_data'];if(get_magic_quotes_gpc()) {	$json_data = json_decode(stripslashes($data), TRUE);} else {	$json_data = json_decode($data, TRUE);}$user_mgmt = new UserMgmt();// $g_current_user_name = $_SERVER['PHP_AUTH_USER'];// $g_current_user_name = $_COOKIE['ne2_username'];// $g_current_user_name = $_SESSION['ne2_username'];$oper_path = $json_data['path'];$has_permission = $user_mgmt->UserHasPermission($g_current_user_name, $oper_path);$fh = new FileHandler();$loggr = new SimpleLogger($ne2_config_info['app_path'] . 'data/.htNavEditor.log');$fh->setLogger($loggr);$bakr = new BackupManager();function check_lock($file_path) {	global $g_current_user_name;	$lock_file = $file_path . '.lock';//	$cur_user = $_SERVER['PHP_AUTH_USER'];//	$cur_user = $_COOKIE['ne2_username'];	$cur_user = $g_current_user_name;	$ret = FALSE; // is locked?	if(!file_exists($lock_file)) {		touch($lock_file);		file_put_contents($lock_file, $cur_user);	} else {		$timeout = 5 * 60; // lock timeout: 5 min		if((time() - filemtime($lock_file)) <= $timeout) {			$r_user = file_get_contents($lock_file);			if(strcmp($r_user, $cur_user) != 0) {				$ret = TRUE;			} else {				$ret = FALSE;			}		} else { // lock timeout, remove it!			@unlink($lock_file);			$ret = FALSE;		}	}	return $ret;}function doRemove($jsnData) {	global $loggr;	if(count($jsnData['child']) == 0) {		$loggr->Log('remove: ' . $_SERVER['DOCUMENT_ROOT'] . $jsnData['path']);		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path']); // !		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.lock');		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.buffer');		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.buffer.lock');	} else {		for($i = 0; $i < count($jsnData['child']); $i++) {			doRemove($jsnData['child'][$i]);		}		$loggr->Log('remove: ' . $_SERVER['DOCUMENT_ROOT'] . $jsnData['path']);		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path']);		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.lock');		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.buffer');		@unlink($_SERVER['DOCUMENT_ROOT'] . $jsnData['path'] . '.buffer.lock');		$loggr->Log('remove: ' . dirname($_SERVER['DOCUMENT_ROOT'] . $jsnData['path']));		rmdir(dirname($_SERVER['DOCUMENT_ROOT'] . $jsnData['path']));	}}function temp_recover_navtree_wrong_code($fpath) {	$content = file_get_contents($fpath);	$content = str_replace(array('u00df', 'u00c4', 'u00e4', 'u00d6', 'u00f6', 'u00dc', 'u00fc'), array('&szlig;', '&Auml', '&auml;', '&Ouml;', '&ouml;', '&Uuml;', '&uuml'), $content);	file_put_contents($fpath, $content);}switch($oper) {	case 'create_sibling':		if($has_permission === FALSE) {			echo('ERR_NO_PERM');			break;		}	      $templPath = $ne2_config_info['template_default'];		$fpath = $json_data['path'];		$fh->setTemplateFile($templPath);		$exists = $fh->checkPath($fpath);		// 1st update: title		$fpath1 = $_SERVER['DOCUMENT_ROOT'] . $json_data['path'];		$title = $json_data['title'];		$ch = new ContentHandler($fpath1);		$ch->setContents($title, '');		$ch->ReplaceContents(false);		echo($fpath . ' created.');		break;	case 'create_child':		if($has_permission === FALSE) {			echo('ERR_NO_PERM');			break;		}		$opath = $_REQUEST['parent_node_path'];		$opath = $_SERVER['DOCUMENT_ROOT'] . $opath;		$templPath = $ne2_config_info['template_default'];		$fpath = $json_data['path'];		$fh->setTemplateFile($templPath);		$exists = $fh->checkPath($fpath);		// 1st update: title		$fpath1 = $_SERVER['DOCUMENT_ROOT'] . $json_data['path'];		$title = $json_data['title'];		$ch = new ContentHandler($fpath1);		$ch->setContents($title, '');		$ch->ReplaceContents(false);		$newDir = dirname($_SERVER['DOCUMENT_ROOT'] . $fpath);		@rename($opath, $newDir . '/index.shtml');		@unlink($opath . '.lock');		@unlink($opath . '.buffer');		@unlink($opath . '.buffer.lock');		echo($fpath . ' created.');		break;	case 'remove':		if($has_permission === FALSE) {			echo('ERR_NO_PERM');			break;		}		doRemove($json_data);		// check if after remove only index.shtml left:		$opath = $json_data['path'];		$ignored = array('index.shtml.lock', 'index.shtml.buffer', 'index.shtml.buffer.lock');		if(strpos($opath, 'index.shtml') === FALSE) {			$opath1 = dirname($_SERVER['DOCUMENT_ROOT'] . $opath);			$ofiles = scandir($opath1);			$ofiles = array_diff($ofiles, $ignored);			if(count($ofiles) <= 3) {				// change index.shtml to ../dirname.shtml				$loggr->Log('to change ' . $opath1 . '/index.shtml to ' . $opath1 . '.shtml');				copy($opath1 . '/index.shtml', $opath1 . '.shtml');				@unlink($opath1 . '/index.shtml.buffer.lock');				@unlink($opath1 . '/index.shtml.buffer');				@unlink($opath1 . '/index.shtml.lock');				unlink($opath1 . '/index.shtml');				rmdir($opath1);			}		} else {			$opath1 = dirname(dirname($_SERVER['DOCUMENT_ROOT'] . $opath));			$ofiles = scandir($opath1);			$ofiles = array_diff($ofiles, $ignored);			if(count($ofiles) <= 3) {				// change index.shtml to ../dirname.shtml				$loggr->Log('to change ' . $opath1 . '/index.shtml to ' . $opath1 . '.shtml');				copy($opath1 . '/index.shtml', $opath1 . '.shtml');				@unlink($opath1 . '/index.shtml.buffer.lock');				@unlink($opath1 . '/index.shtml.buffer');				@unlink($opath1 . '/index.shtml.lock');				unlink($opath1 . '/index.shtml');				rmdir($opath1);			}		}		echo('Seite wurde entfernt.');		break;	case 'get_content':		if((strlen($json_data['url']) < 1) || ((strlen($json_data['url']) > 0) && (file_exists($_SERVER['DOCUMENT_ROOT'] . $json_data['path'])))) {			$has_buffer = FALSE;			$is_locked = FALSE;			$fpath = $json_data['path'];			$fh->checkPath($fpath); // well if no such file, it will be created here (from a default template)			$fpath = $_SERVER['DOCUMENT_ROOT'] . $fpath;			$draft_path = $fpath . '.buffer';			if(file_exists($draft_path)) {				$fpath = $draft_path;				$has_buffer = TRUE;			}			$is_locked = check_lock($fpath);			$ch = new ContentHandler($fpath);			$loggr->Log('get_content: ' . $fpath);//			$ret = str_replace(array('<!--#', '<!--', '-->'), array('<comment_ssi>', '<comment>', '</comment>'), $ch->GetContentHtml());			$ret = str_replace(array('<!--#', '<!--', '-->'), array('<comment_ssi>', '<comment>', '</comment>'), $ch->getContentHtmlEx());			$ret_arr = array(				'is_locked' => $is_locked,				'is_draft' => $has_buffer,				'content_html' => $ret			);			echo(json_encode($ret_arr));		} else {			$rv = array(				'is_locked' => $is_locked,				'is_draft' => $has_buffer,				'content_html' => '<span style="color:blue;">Diese Seite ist als Link auf eine andere Seite definiert. Daher ist kein Inhalt vorhanden.</span>'			);//			echo('<span style="color:blue;">This node is a link, no content here.</span>');			echo(json_encode($rv));		}		break;	case 'set_contents':		if($has_permission === FALSE) {			echo('ERR_NO_PERM');			break;		}		if(strlen($json_data['url']) < 1) {			$oldPath = $_SERVER['DOCUMENT_ROOT'] . $_REQUEST['old_path'];			$fname = basename($oldPath);			$chDir = FALSE;			if($fname == 'index.shtml') {				$chDir = TRUE;			}			$save_draft = $_POST['save_draft'];			$fpath = $_SERVER['DOCUMENT_ROOT'] . $json_data['path'];			$title = $json_data['title'];			$content = stripslashes($_REQUEST['content_html']); // !!!			$content = str_replace(array('<comment_ssi>', '<comment>', '</comment>'), array('<!-' . '-#', '<!--', '-->'), $content);			$ch = new ContentHandler($oldPath);			$ch->setContents($title, $content);			$ch->setBackupManager($bakr);			if(($save_draft == 'ja') && ($oldPath == $fpath)) { // draft can only be saved if not renamed				$ch->SaveAsDraft();				echo('Entwurf wurde gespeichert.');			} else {				$ch->ReplaceContents();				$loggr->Log('to_rename: ' . $oldPath . ' -> ' . $fpath);				if($oldPath != $fpath) {					if(!$chDir) {						rename($oldPath, $fpath);					} else {						rename(dirname($oldPath), dirname($fpath)); // index.shtml remains					}				}				echo('Seite wurde aktualisiert.');			}		} else {			echo('Seite wurde aktualisiert.');		}		break;	case 'get_backup_list':		$json_bak_list = $bakr->list_backup_versions($json_data['path']);		echo($json_bak_list);		break;	case 'recover':		$bak_file_name = $_REQUEST['backup_file_name'];		$fpath = $_SERVER['DOCUMENT_ROOT'] . $json_data['path'];		$bakr->restore($fpath, $bak_file_name);		echo('Der Inhalt der Seite wurde durch die gewÃ¤hlte alte Version ersetzt und publiziert._' . $json_data['key']);		break;	case 'move':		$src_path = $_REQUEST['src_path'];		$dst_path = $_REQUEST['dst_path'];		rename($_SERVER['DOCUMENT_ROOT'] . $src_path, $_SERVER['DOCUMENT_ROOT'] . dirname($dst_path) . '/' . basename($src_path));		echo("Datei wurde verschoben.");		break;	case 'get_navindex_backup_list':		$json_bak_list1 = $bakr->list_navindex_backups();		echo($json_bak_list1);		break;	case 'recover_navindex':		$bak_file_name1 = $_POST['navindex_backup_file_name'];		$bakr->recover_navindex($bak_file_name1);		echo('Navigationsbaum wurde wiederherstellt.');		break;	case 'temp_recover_navtree_wrong_code':		$internal_tree_file = $_SERVER['DOCUMENT_ROOT'] . '/vkdaten/navigationsindex_buffer.txt';		$public_tree_file = $_SERVER['DOCUMENT_ROOT'] . '/vkdaten/navigationsindex.txt';		temp_recover_navtree_wrong_code($internal_tree_file);		temp_recover_navtree_wrong_code($public_tree_file);		echo('Done!');		break;	case 'change_ssi_head':		$fpath = $_SERVER['DOCUMENT_ROOT'] . $_REQUEST['file_path'];		$ch = new ContentHandler($fpath);		$ch->change_ssi_head($_REQUEST['new_head']);		echo('Der Kopfteil der Seite wurde gewechselt.');		break;	default:		break;}?>